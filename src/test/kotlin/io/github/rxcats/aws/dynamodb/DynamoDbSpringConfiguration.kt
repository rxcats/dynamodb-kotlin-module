package io.github.rxcats.aws.dynamodb

import com.amazonaws.services.dynamodbv2.local.main.ServerRunner
import com.amazonaws.services.dynamodbv2.local.server.DynamoDBProxyServer
import org.springframework.boot.autoconfigure.EnableAutoConfiguration
import org.springframework.boot.context.properties.ConfigurationProperties
import org.springframework.boot.context.properties.EnableConfigurationProperties
import org.springframework.context.ApplicationContext
import org.springframework.context.ApplicationContextAware
import org.springframework.context.annotation.Bean
import org.springframework.context.annotation.ComponentScan
import org.springframework.context.annotation.Configuration
import software.amazon.awssdk.auth.credentials.AwsBasicCredentials
import software.amazon.awssdk.auth.credentials.AwsCredentialsProvider
import software.amazon.awssdk.auth.credentials.StaticCredentialsProvider
import software.amazon.awssdk.enhanced.dynamodb.DynamoDbEnhancedClient
import software.amazon.awssdk.enhanced.dynamodb.extensions.AtomicCounterExtension
import software.amazon.awssdk.enhanced.dynamodb.extensions.AutoGeneratedTimestampRecordExtension
import software.amazon.awssdk.enhanced.dynamodb.extensions.VersionedRecordExtension
import software.amazon.awssdk.regions.Region
import software.amazon.awssdk.services.dynamodb.DynamoDbClient
import io.github.rxcats.aws.dynamodb.extensions.tableOf
import io.github.rxcats.aws.dynamodb.query.AbstractDynamoDbRepository
import io.github.rxcats.aws.dynamodb.query.DynamoDbTableOperations
import jakarta.annotation.PostConstruct
import jakarta.annotation.PreDestroy
import org.springframework.beans.factory.annotation.Autowired
import java.net.URI
import kotlin.reflect.KClass

@Configuration(proxyBeanMethods = false)
@ComponentScan
@EnableAutoConfiguration
class DynamoDbTestConfiguration

@Configuration(proxyBeanMethods = false)
class DynamoDbLocalServer {
    @Autowired
    private lateinit var properties: DynamoDbProperties

    private lateinit var server: DynamoDBProxyServer

    @PostConstruct
    fun start() {
        if (!::server.isInitialized) {
            server = ServerRunner.createServerFromCommandLineArgs(arrayOf("-port", properties.port.toString(), "-inMemory", "-sharedDb"))
            server.safeStart()
        }
    }

    @PreDestroy
    fun stop() {
        if (::server.isInitialized) {
            server.stop()
        }
    }
}

@ConfigurationProperties(prefix = "app.aws.dynamodb")
data class DynamoDbProperties(
    val port: Int,
    val endpoint: String,
    val region: Region,
    val tableNamePrefix: String,
)

@EnableConfigurationProperties(DynamoDbProperties::class)
@Configuration(proxyBeanMethods = false)
class DynamoDbConfiguration {
    @Bean
    fun awsCredentialsProvider(): AwsCredentialsProvider {
        return StaticCredentialsProvider.create(
            AwsBasicCredentials.create("fake", "fake")
        )
    }

    @Bean
    fun dynamoDbClient(
        awsCredentialsProvider: AwsCredentialsProvider,
        dynamoDbProperties: DynamoDbProperties
    ): DynamoDbClient {
        return DynamoDbClient.builder()
            .credentialsProvider(awsCredentialsProvider)
            .endpointOverride(URI.create(dynamoDbProperties.endpoint))
            .region(dynamoDbProperties.region)
            .build()
    }

    @Bean
    fun dynamoDbEnhancedClient(dynamoDbClient: DynamoDbClient): DynamoDbEnhancedClient {
        return DynamoDbEnhancedClient.builder()
            .dynamoDbClient(dynamoDbClient)
            .extensions(
                AutoGeneratedTimestampRecordExtension.create(),
                AtomicCounterExtension.builder().build(),
                VersionedRecordExtension.builder().build()
            )
            .build()
    }

    @Bean
    fun dynamoDbTableOperations(dynamoDbClient: DynamoDbClient): DynamoDbTableOperations {
        return DynamoDbTableOperations(dynamoDbClient)
    }
}

abstract class SimpleDynamoDbRepository<T : Any>(
    private val type: KClass<T>
) : ApplicationContextAware, AbstractDynamoDbRepository<T>() {
    override fun setApplicationContext(applicationContext: ApplicationContext) {
        super.enhancedClient = applicationContext.getBean(DynamoDbEnhancedClient::class.java)
        val properties = applicationContext.getBean(DynamoDbProperties::class.java)
        super.entityType = type
        super.table = enhancedClient.tableOf(type, properties.tableNamePrefix)
    }
}
